	{ Semantic Operations }
	oTempAllocate = 14;
	oTempFree = 15;
	oOperandPushMode = 16; { (16) }
	oOperandChooseMode = 17; { >>16 }
	oOperandPushVariable = 18;
	oOperandPushInteger = 19;
	oOperandPushChar = 20;
	oOperandPushBoolean = 21;
	oOperandPushJumpCondition = 22; { (15) }
	oOperandChooseJumpCondition = 23; { >>15 }
	oOperandPushStringDescriptor = 24;
	oOperandPushProcedure = 25;
	oOperandPushTrap = 26;
	oOperandPushCaseLow = 27;
	oOperandPushCaseHigh = 28;
	oOperandPushArrayLowerBound = 29;
	oOperandPushCopy = 30;
	oOperandPushTemp = 31;
	oOperandSetMode = 32; { (16) }
	oOperandSetLength = 33; { (13) }
	oOperandChooseLength = 34; { >>13 }
	oOperandSetValue = 35; { (13) }
	oOperandChooseValue = 36; { >>13 }
	oOperandChooseManifestValue = 37; { >>13 }
	oOperandIsValueNegative = 38; { >>14 }
	oOperandEnterValueFromCaseTableAddress = 39;
	oOperandEnterValueFromCodeAddress = 40;
	oOperandEnterValueFromStringLength = 41;
	oOperandEnterValueFromDataAreaSize = 42;
	oOperandCompareLeftAndRight = 43; { >>14 }
	oOperandCompareRightAndDestination = 44; { >>14 }
	oOperandIsJumpCondition = 45; { >>14 }
	oOperandComplementJumpCondition = 46;
	oOperandAddManifestValues = 47;
	oOperandSubtractManifestValues = 48;
	oOperandNegateManifestValue = 49;
	oOperandCompareManifestValues = 50; { >>14 }
	oOperandMergeShuntsWithAddress = 51;
	oOperandMergeShunts = 52;
	oOperandFoldManifestSubscript = 53;
	oOperandSwap = 54;
	oOperandSwapRightAndDestination = 55;
	oOperandPop = 56;
	oFixPushAddress = 57;
	oFixPushLastAddress = 58;
	oFixSwapAddresses = 59;
	oFixAndFreeShuntList = 60;
	oFixAndFreeFalseBranches = 61;
	oFixForwardBranch = 62;
	oFixPopAddress = 63;
	oEmitProcLabel = 64; { (16) }
	oEmitNone = 65; { (17) }
	oEmitSingle = 66; { (17) }
	oEmitDouble = 67; { (17) }
	oEmitString = 68;
	oEmitStringLength = 69;
	oEmitConditionalForwardBranch = 70;
	oEmitUnconditionalForwardBranch = 71;
	oEmitConditionalBackwardBranch = 72;
	oEmitUnconditionalBackwardBranch = 73;
	oEmitSourceCoordinate = 74;
	oEmitMergeSourceCoordinate = 75;
	oEmitCaseMergeBranch = 76;
	oEmitCaseBranchTable = 77;
	oCasePush = 78;
	oCasePop = 79;
	oCaseEnterTCodeAddress = 80;
	oCaseEnterVariantAddress = 81;
	oCaseEnterMergeAddress = 82;
	oCaseEnterAbortAddress = 83;
	oArrayEnterLowerBound = 84;
	oArrayEnterUpperBound = 85;
	oOptionTestChecking = 86; { >>14 }

	{ Input Tokens }
	tMultiply = 0;
	tDivide = 1;
	tModulus = 2;
	tAdd = 3;
	tSubtract = 4;
	tEQ = 5;
	tNE = 6;
	tGT = 7;
	tGE = 8;
	tLT = 9;
	tLE = 10;
	tAnd = 11;
	tInfixAnd = 12;
	tOr = 13;
	tInfixOr = 14;
	tNegate = 15;
	tNot = 16;
	tChr = 17;
	tOrd = 18;
	tEoln = 19;
	tEOF = 20;
	tVarParm = 21;
	tFetchAddress = 22;
	tFetchInteger = 23;
	tFetchChar = 24;
	tFetchBoolean = 25;
	tAssignBegin = 26;
	tAssignAddress = 27;
	tAssignInteger = 28;
	tAssignChar = 29;
	tAssignBoolean = 30;
	tStoreParmAddress = 31;
	tStoreParmInteger = 32;
	tStoreParmChar = 33;
	tStoreParmBoolean = 34;
	tSubscriptBegin = 35;
	tSubscriptAddress = 36;
	tSubscriptInteger = 37;
	tSubscriptChar = 38;
	tSubscriptBoolean = 39;
	tArrayDescriptor = 40;
	tFileDescriptor = 41;
	tIfBegin = 42;
	tIfEnd = 43;
	tCaseBegin = 44;
	tWhileBegin = 45;
	tRepeatBegin = 46;
	tRepeatControl = 47;
	tCallBegin = 48;
	tParmEnd = 49;
	tProcedureEnd = 50;
	tWriteBegin = 51;
	tReadBegin = 52;
	tPopStack = 53;
	tLiteralAddress = 54;
	tLiteralInteger = 55;
	tLiteralChar = 56;
	tLiteralBoolean = 57;
	tLiteralString = 58;
	tStringDescriptor = 59;
	tSkipString = 60;
	tIfThen = 61;
	tIfMerge = 62;
	tCaseSelect = 63;
	tCaseMerge = 64;
	tCaseEnd = 65;
	tWhileTest = 66;
	tWhileEnd = 67;
	tRepeatTest = 68;
	tSkipProc = 69;
	tCallEnd = 70;
	tLineNumber = 71;
	tTrap = 72;

	{ Output Tokens }

	{ Input/Output Tokens }

	{ Error Codes }
	eDivisionByZero = 10;

	{ Type Values }
	{ Type 13 }
	minusOne = -1;
	zero = 0;
	null = 0;
	one = 1;
	two = 2;
	four = 4;
	six = 6;
	eight = 8;
	trHalt = 0;
	trRead = 3;
	trSubscriptByte = 12;
	trSubscriptWord = 13;
	trCaseAbort = 14;
	trEoln = 15;
	trEof = 16;
	trSubscriptError = 17;
	byte = 1;
	word = 2;
	{ Type 14 }
	no = 0;
	yes = 1;
	{ Type 15 }
	iJalways = -9;
	iJhi = -8;
	iJlos = -7;
	iJge = -6;
	iJlt = -5;
	iJle = -4;
	iJgt = -3;
	iJne = -2;
	iJeq = -1;
	iJnever = 0;
	{ Type 16 }
	mStatic = 1;
	mStaticManifest = 2;
	mTemp = 3;
	mAddressTemp = 4;
	mAddressTempIndirect = 5;
	mAddressTempAutoIncrement = 6;
	mAddressTempIndirectCaseOffset = 7;
	mStack = 8;
	mPushStack = 9;
	mPopStack = 10;
	mManifest = 11;
	mLineReg = 12;
	mProc = 13;
	mTrap = 14;
	mString = 15;
	mWord = 16;
	{ Type 17 }
	iAdd = 1;
	iClr = 2;
	iCmp = 3;
	iDec = 4;
	iDiv = 5;
	iInc = 6;
	iMov = 7;
	iMul = 8;
	iNeg = 9;
	iSub = 10;
	iTst = 11;
	iJmp = 12;
	iBsr = 13;
	iRts = 14;
	iGlobl = 15;
	iJsr = 16;
	iText = 17;
	iData = 18;
	iWord = 19;
	iSpace = 20;
	iLoada = 21;
	iPusha = 22;
	iAsl = 23;

	{ S/SL Rule Table Addresses } {
	Program = 0;
	EmitProgramPrologue = 5;
	Block = 23;
	Routine = 136;
	Statements = 249;
	OperandPushTempWord = 3248;
	OperandPopAndFreeTemp = 2690;
	AssignStmt = 311;
	CallStmt = 319;
	IfStmt = 368;
	WhileStmt = 528;
	RepeatStmt = 555;
	CaseStmt = 581;
	WriteProc = 699;
	ReadProc = 735;
	TrapStmt = 766;
	OperandPushVariable = 1001;
	OperandPushExpressionAssignPopPop = 1474;
	OperandPushExpression = 805;
	OperandConvertJumpConditionToData = 2719;
	VarArgument = 359;
	OperandForceToStack = 3272;
	OperandPushBooleanControlExpression = 421;
	FoldIfStmt = 463;
	OperandInfixOr = 2596;
	OperandForceToJumpCondition = 426;
	SkipToEndIf = 509;
	OperandFreeTemp = 2705;
	CaseSelect = 609;
	CaseVariant = 612;
	CaseEnd = 620;
	EmitDefaultCaseAbort = 630;
	EmitCaseSubscriptJump = 645;
	OperandForceIntoAddressTemp = 3186;
	OperandSubtractRightFromLeftPop = 1975;
	WriteParameter = 714;
	ReadParameter = 750;
	EmitStringDescriptor = 998;
	OperandNegate = 1782;
	OperandAddPop = 1878;
	OperandSubtractPop = 2009;
	OperandMultiplyPop = 2158;
	OperandDividePop = 2323;
	OperandModPop = 2347;
	OperandNot = 2592;
	OperandOrPop = 2613;
	OperandEqualPop = 2789;
	OperandGreaterPop = 2866;
	OperandLessPop = 2958;
	OperandChr = 2390;
	OperandOrd = 2427;
	OperandEolnFunction = 2451;
	OperandEofFunction = 2475;
	OperandSubscriptIntegerPop = 1068;
	OperandSubscriptCharPop = 1097;
	OperandSubscriptBooleanPop = 1129;
	OperandSubscriptNonManifestIntegerPop = 1132;
	OperandSubscriptNonManifestCharPop = 1287;
	OperandCheckedSubscriptNonManifestIntegerPop = 1145;
	OperandUncheckedSubscriptNonManifestIntegerPop = 1208;
	OperandForceIntoTemp = 3110;
	OperandForceArrayDescriptorIntoCorrespondingAddressTemp = 1439;
	EmitSubscriptErrorTrap = 1399;
	OperandCheckedSubscriptNonManifestCharPop = 1300;
	OperandUncheckedSubscriptNonManifestCharPop = 1350;
	OperandAssignIntegerPopPop = 2619;
	OperandAssignCharPopPop = 2657;
	OperandAssignBooleanPopPop = 2685;
	OperandNegateAssignPopPop = 1755;
	OperandAddAssignPopPopPop = 1803;
	OperandSubtractAssignPopPopPop = 1955;
	OperandMultiplyAssignPopPopPop = 2052;
	OperandDivideAssignPopPopPop = 2257;
	OperandNotAssignPopPop = 2499;
	OperandChrAssignPopPop = 2377;
	OperandOrdAssignPopPop = 2396;
	OperandAddRightToLeftPop = 1836;
	OperandForceLeftIntoTemp = 3172;
	OperandMultiplyLeftByRightPop = 2085;
	OperandDivideLeftByRightPop = 2277;
	OperandPushTempByte = 3257;
	OperandPushTrueTemp = 2773;
	OperandFoldComparisonPopPop = 3086;
	EmitCmp = 3050;
	OperandPushAddressTemp = 3266;
	OperandLeftOrRightIsTemp = 3333; >>14
	OperandAreLeftAndRightManifest = 3304; >>14
	}

	{ S/SL Table Parameters }
	sslTblSize = 3362;
	minSslTableValue = -32767;
	maxSslTableValue = 32767;
